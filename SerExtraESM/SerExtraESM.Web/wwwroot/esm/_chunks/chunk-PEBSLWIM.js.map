{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/_Ext/AuditLogRow.ts", "../../../Modules/ServerTypes/_Ext/AuditLogService.ts", "../../../Modules/ServerTypes/Administration/LanguageColumns.ts", "../../../Modules/ServerTypes/Administration/LanguageRow.ts", "../../../Modules/ServerTypes/Administration/LanguageService.ts", "../../../Modules/ServerTypes/Administration/RoleColumns.ts", "../../../Modules/ServerTypes/Administration/RoleRow.ts", "../../../Modules/ServerTypes/Administration/RoleService.ts", "../../../Modules/ServerTypes/Administration/TranslationService.ts", "../../../Modules/ServerTypes/Administration/UserColumns.ts", "../../../Modules/ServerTypes/Administration/UserRow.ts", "../../../Modules/ServerTypes/Administration/UserService.ts", "../../../Modules/ServerTypes/_Ext/AuditActionType.ts", "../../../Modules/Administration/AuditLog/AuditLogActionTypeFormatter.ts", "../../../Modules/ServerTypes/_Ext/AuditLogColumns.ts", "../../../Modules/ServerTypes/_Ext/AuditLogForm.ts", "../../../Modules/_Ext/Editors/StaticTextBlock.ts", "../../../Modules/ServerTypes/_Ext/AuditLogViewerService.ts", "../../../Modules/ServerTypes/_Ext/Months.ts", "../../../Modules/ServerTypes/_Ext/TimeUoM.ts", "../../../Modules/ServerTypes/Administration/LanguageForm.ts", "../../../Modules/ServerTypes/Administration/PermissionKeys.ts", "../../../Modules/ServerTypes/Administration/RoleForm.ts", "../../../Modules/ServerTypes/Administration/RolePermissionRow.ts", "../../../Modules/ServerTypes/Administration/RolePermissionService.ts", "../../../Modules/ServerTypes/Administration/UserForm.ts", "../../../Modules/ServerTypes/Administration/UserPermissionRow.ts", "../../../Modules/ServerTypes/Administration/UserPermissionService.ts", "../../../Modules/ServerTypes/Administration/UserRoleRow.ts", "../../../Modules/ServerTypes/Administration/UserRoleService.ts"],
  "sourcesContent": ["\uFEFFimport { AuditActionType } from \"./AuditActionType\";\nimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface AuditLogRow {\n    Id?: number;\n    UserId?: string;\n    ActionType?: AuditActionType;\n    ActionDate?: string;\n    EntityTableName?: string;\n    EntityId?: string;\n    Changes?: string;\n    IpAddress?: string;\n    SessionId?: string;\n    RequestedURI?: string;\n}\n\nexport abstract class AuditLogRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'EntityTableName';\n    static readonly localTextPrefix = '_Ext.AuditLog';\n    static readonly deletePermission = 'Administration:AuditLog';\n    static readonly insertPermission = 'Administration:AuditLog';\n    static readonly readPermission = 'Administration:AuditLog';\n    static readonly updatePermission = 'Administration:AuditLog';\n\n    static readonly Fields = fieldsProxy<AuditLogRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { AuditLogRow } from \"./AuditLogRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace AuditLogService {\n    export const baseUrl = '_Ext/AuditLog';\n\n    export declare function Create(request: SaveRequest<AuditLogRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<AuditLogRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<AuditLogRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<AuditLogRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"_Ext/AuditLog/Create\",\n        Update: \"_Ext/AuditLog/Update\",\n        Delete: \"_Ext/AuditLog/Delete\",\n        Retrieve: \"_Ext/AuditLog/Retrieve\",\n        List: \"_Ext/AuditLog/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>AuditLogService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class LanguageColumns {\n    static columnsKey = 'Administration.Language';\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface LanguageRow {\n    Id?: number;\n    LanguageId?: string;\n    LanguageName?: string;\n}\n\nexport abstract class LanguageRow {\n    static readonly idProperty = 'Id';\n    static readonly nameProperty = 'LanguageName';\n    static readonly localTextPrefix = 'Administration.Language';\n    static readonly lookupKey = 'Administration.Language';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<LanguageRow>('Administration.Language') }\n    static async getLookupAsync() { return getLookupAsync<LanguageRow>('Administration.Language') }\n\n    static readonly deletePermission = 'Administration:Translation';\n    static readonly insertPermission = 'Administration:Translation';\n    static readonly readPermission = 'Administration:Translation';\n    static readonly updatePermission = 'Administration:Translation';\n\n    static readonly Fields = fieldsProxy<LanguageRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { LanguageRow } from \"./LanguageRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace LanguageService {\n    export const baseUrl = 'Administration/Language';\n\n    export declare function Create(request: SaveRequest<LanguageRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<LanguageRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<LanguageRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<LanguageRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Administration/Language/Create\",\n        Update: \"Administration/Language/Update\",\n        Delete: \"Administration/Language/Delete\",\n        Retrieve: \"Administration/Language/Retrieve\",\n        List: \"Administration/Language/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>LanguageService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class RoleColumns {\n    static columnsKey = 'Administration.Role';\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface RoleRow {\n    RoleId?: number;\n    RoleName?: string;\n}\n\nexport abstract class RoleRow {\n    static readonly idProperty = 'RoleId';\n    static readonly nameProperty = 'RoleName';\n    static readonly localTextPrefix = 'Administration.Role';\n    static readonly lookupKey = 'Administration.Role';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<RoleRow>('Administration.Role') }\n    static async getLookupAsync() { return getLookupAsync<RoleRow>('Administration.Role') }\n\n    static readonly deletePermission = 'Administration:Security';\n    static readonly insertPermission = 'Administration:Security';\n    static readonly readPermission = 'Administration:Security';\n    static readonly updatePermission = 'Administration:Security';\n\n    static readonly Fields = fieldsProxy<RoleRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { RoleRow } from \"./RoleRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace RoleService {\n    export const baseUrl = 'Administration/Role';\n\n    export declare function Create(request: SaveRequest<RoleRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<RoleRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<RoleRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<RoleRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Administration/Role/Create\",\n        Update: \"Administration/Role/Update\",\n        Delete: \"Administration/Role/Delete\",\n        Retrieve: \"Administration/Role/Retrieve\",\n        List: \"Administration/Role/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>RoleService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { TranslationListRequest } from \"./TranslationListRequest\";\nimport { ListResponse, SaveResponse } from \"@serenity-is/corelib\";\nimport { TranslationItem } from \"./TranslationItem\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { TranslationUpdateRequest } from \"./TranslationUpdateRequest\";\n\nexport namespace TranslationService {\n    export const baseUrl = 'Administration/Translation';\n\n    export declare function List(request: TranslationListRequest, onSuccess?: (response: ListResponse<TranslationItem>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: TranslationUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        List: \"Administration/Translation/List\",\n        Update: \"Administration/Translation/Update\"\n    } as const;\n\n    [\n        'List', \n        'Update'\n    ].forEach(x => {\n        (<any>TranslationService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFexport class UserColumns {\n    static columnsKey = 'Administration.User';\n}\n", "\uFEFFimport { getLookup, getLookupAsync, fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface UserRow {\n    UserId?: number;\n    Username?: string;\n    Source?: string;\n    PasswordHash?: string;\n    PasswordSalt?: string;\n    DisplayName?: string;\n    Email?: string;\n    UserImage?: string;\n    LastDirectoryUpdate?: string;\n    IsActive?: number;\n    Password?: string;\n    PasswordConfirm?: string;\n    Roles?: number[];\n    InsertUserId?: number;\n    InsertDate?: string;\n    UpdateUserId?: number;\n    UpdateDate?: string;\n}\n\nexport abstract class UserRow {\n    static readonly idProperty = 'UserId';\n    static readonly isActiveProperty = 'IsActive';\n    static readonly nameProperty = 'Username';\n    static readonly localTextPrefix = 'Administration.User';\n    static readonly lookupKey = 'Administration.User';\n\n    /** @deprecated use getLookupAsync instead */\n    static getLookup() { return getLookup<UserRow>('Administration.User') }\n    static async getLookupAsync() { return getLookupAsync<UserRow>('Administration.User') }\n\n    static readonly deletePermission = 'Administration:Security';\n    static readonly insertPermission = 'Administration:Security';\n    static readonly readPermission = 'Administration:Security';\n    static readonly updatePermission = 'Administration:Security';\n\n    static readonly Fields = fieldsProxy<UserRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListResponse } from \"@serenity-is/corelib\";\nimport { UserRow } from \"./UserRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { UserListRequest } from \"./UserListRequest\";\n\nexport namespace UserService {\n    export const baseUrl = 'Administration/User';\n\n    export declare function Create(request: SaveRequest<UserRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<UserRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<UserRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: UserListRequest, onSuccess?: (response: ListResponse<UserRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Administration/User/Create\",\n        Update: \"Administration/User/Update\",\n        Delete: \"Administration/User/Delete\",\n        Retrieve: \"Administration/User/Retrieve\",\n        List: \"Administration/User/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>UserService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum AuditActionType {\n    Insert = 1,\n    Update = 2,\n    Delete = 3\n}\nDecorators.registerEnumType(AuditActionType, '_Ext.AuditActionType', 'Enum.Audit.AuditActionType');\n", "import * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Slick from \"@serenity-is/sleekgrid\"\r\nimport { AuditLogRow, AuditLogForm, AuditLogService } from \"../\";\r\nimport { AuditActionType } from \"../\"\r\n\r\n@Serenity.Decorators.registerFormatter('_Ext.AuditLogActionTypeFormatter', [Serenity.ISlickFormatter])\r\nexport class AuditLogActionTypeFormatter implements Serenity.Formatter {\r\n    static format(ctx: Slick.FormatterContext) {\r\n        let item = ctx.item as AuditLogRow;\r\n\r\n        let klass = '';\r\n        if (item.ActionType == AuditActionType.Update) {\r\n            klass = 'warning'\r\n        } else if (item.ActionType == AuditActionType.Delete) {\r\n            klass = 'danger'\r\n        } else {\r\n            klass = 'default'\r\n        }\r\n\r\n        return `<span class=\"label label-${klass}\">${AuditActionType[item.ActionType]}</span>`;\r\n    }\r\n\r\n    format(ctx: Slick.FormatterContext) {\r\n        return AuditLogActionTypeFormatter.format(ctx);\r\n    }\r\n}\r\n", "\uFEFFimport { AuditLogActionTypeFormatter } from \"@/Administration/AuditLog/AuditLogActionTypeFormatter\";\nimport { AuditActionType } from \"./AuditActionType\";\n\nexport class AuditLogColumns {\n    static columnsKey = '_Ext.AuditLog';\n}\n\n[AuditLogActionTypeFormatter, AuditActionType]; // referenced types\n", "\uFEFFimport { StringEditor, EnumEditor, DateTimeEditor, IntegerEditor, LookupEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { AuditActionType } from \"./AuditActionType\";\nimport { StaticTextBlock } from \"@/_Ext/Editors/StaticTextBlock\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface AuditLogForm {\n    EntityTableName: StringEditor;\n    ActionType: EnumEditor;\n    ActionDate: DateTimeEditor;\n    EntityId: IntegerEditor;\n    Changes: StaticTextBlock;\n    UserId: LookupEditor;\n    IpAddress: StringEditor;\n    SessionId: StringEditor;\n    RequestedURI: StringEditor;\n}\n\nexport class AuditLogForm extends PrefixedContext {\n    static formKey = '_Ext.AuditLog';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!AuditLogForm.init)  {\n            AuditLogForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = EnumEditor;\n            var w2 = DateTimeEditor;\n            var w3 = IntegerEditor;\n            var w4 = StaticTextBlock;\n            var w5 = LookupEditor;\n\n            initFormType(AuditLogForm, [\n                'EntityTableName', w0,\n                'ActionType', w1,\n                'ActionDate', w2,\n                'EntityId', w3,\n                'Changes', w4,\n                'UserId', w5,\n                'IpAddress', w0,\n                'SessionId', w0,\n                'RequestedURI', w0\n            ]);\n        }\n    }\n}\n\n[AuditActionType]; // referenced types\n", "import * as Serenity from \"@serenity-is/corelib\"\r\nimport * as Q from \"@serenity-is/corelib/q\"\r\n\r\n@Serenity.Decorators.registerEditor('_Ext.StaticTextBlock', [Serenity.ISetEditValue])\r\n@Serenity.Decorators.element(\"<div/>\")\r\nexport class StaticTextBlock extends Serenity.Widget<StaticTextBlockOptions>\r\n    implements Serenity.ISetEditValue {\r\n\r\n    private _value: string;\r\n\r\n    constructor(container: JQuery, options: StaticTextBlockOptions) {\r\n        super(container, options);\r\n\r\n        // hide the caption label for this editor if in a form. ugly hack\r\n        if (this.options.hideLabel)\r\n            this.element.closest('.field').find('.caption').hide();\r\n\r\n        // remove required asterisk (*)\r\n        this.element.closest('.field').find('sup').hide();\r\n\r\n        this.updateElementContent();\r\n    }\r\n\r\n    private updateElementContent() {\r\n        var text = Q.coalesce(this.options.text, this._value);\r\n\r\n        if (this.options.isDate)\r\n            text = Q.formatDate(text);\r\n\r\n        if (this.options.isDateTime)\r\n            text = Q.formatDate(text, Q.Culture.dateTimeFormat);\r\n\r\n        // if isLocalText is set, text is actually a local text key\r\n        if (this.options.isLocalText)\r\n            text = Q.text(text);\r\n\r\n        // don't html encode if isHtml option is true\r\n        if (this.options.isHtml)\r\n            this.element.html(text);\r\n        else\r\n            this.element.text(text);\r\n    }\r\n\r\n    /**\r\n     * By implementing ISetEditValue interface, we allow this editor to display its field value.\r\n     * But only do this when our text content is not explicitly set in options\r\n     */\r\n    public setEditValue(source: any, property: Serenity.PropertyItem) {\r\n        if (this.options.text == null) {\r\n            this._value = Q.coalesce(this.options.text, source[property.name]);\r\n            this.updateElementContent();\r\n        }\r\n    }\r\n\r\n    public get value() {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value) {\r\n        this._value = value;\r\n        this.updateElementContent();\r\n    }\r\n\r\n}\r\n\r\nexport interface StaticTextBlockOptions {\r\n    text: string;\r\n    isHtml: boolean;\r\n    isLocalText: boolean;\r\n    hideLabel: boolean;\r\n    isDate: boolean;\r\n    isDateTime: boolean;\r\n}\r\n", "\uFEFFimport { AuditLogViewerRequest } from \"./AuditLogViewerRequest\";\nimport { AuditLogViewerResponse } from \"./AuditLogViewerResponse\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace AuditLogViewerService {\n    export const baseUrl = 'AuditLogViewer';\n\n    export declare function List(request: AuditLogViewerRequest, onSuccess?: (response: AuditLogViewerResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        List: \"AuditLogViewer/List\"\n    } as const;\n\n    [\n        'List'\n    ].forEach(x => {\n        (<any>AuditLogViewerService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum Months {\n    January = 0,\n    February = 1,\n    March = 2,\n    April = 3,\n    May = 4,\n    June = 5,\n    July = 6,\n    August = 7,\n    September = 8,\n    October = 9,\n    November = 10,\n    December = 11\n}\nDecorators.registerEnumType(Months, '_Ext.Months', 'Months');\n", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum TimeUoM {\n    Hour = 1,\n    Day = 2,\n    Week = 3,\n    Month = 4,\n    CalenderMonth = 5,\n    Year = 6\n}\nDecorators.registerEnumType(TimeUoM, '_Ext.TimeUoM', 'TimeUoM');\n", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface LanguageForm {\n    LanguageId: StringEditor;\n    LanguageName: StringEditor;\n}\n\nexport class LanguageForm extends PrefixedContext {\n    static formKey = 'Administration.Language';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!LanguageForm.init)  {\n            LanguageForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(LanguageForm, [\n                'LanguageId', w0,\n                'LanguageName', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFexport namespace PermissionKeys {\n    export const Security = \"Administration:Security\";\n    export const Translation = \"Administration:Translation\";\n}\n", "\uFEFFimport { StringEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface RoleForm {\n    RoleName: StringEditor;\n}\n\nexport class RoleForm extends PrefixedContext {\n    static formKey = 'Administration.Role';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!RoleForm.init)  {\n            RoleForm.init = true;\n\n            var w0 = StringEditor;\n\n            initFormType(RoleForm, [\n                'RoleName', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface RolePermissionRow {\n    RolePermissionId?: number;\n    RoleId?: number;\n    PermissionKey?: string;\n    RoleRoleName?: string;\n}\n\nexport abstract class RolePermissionRow {\n    static readonly idProperty = 'RolePermissionId';\n    static readonly nameProperty = 'PermissionKey';\n    static readonly localTextPrefix = 'Administration.RolePermission';\n    static readonly deletePermission = 'Administration:Security';\n    static readonly insertPermission = 'Administration:Security';\n    static readonly readPermission = 'Administration:Security';\n    static readonly updatePermission = 'Administration:Security';\n\n    static readonly Fields = fieldsProxy<RolePermissionRow>();\n}\n", "\uFEFFimport { RolePermissionUpdateRequest } from \"./RolePermissionUpdateRequest\";\nimport { SaveResponse } from \"@serenity-is/corelib\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { RolePermissionListRequest } from \"./RolePermissionListRequest\";\nimport { RolePermissionListResponse } from \"./RolePermissionListResponse\";\n\nexport namespace RolePermissionService {\n    export const baseUrl = 'Administration/RolePermission';\n\n    export declare function Update(request: RolePermissionUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: RolePermissionListRequest, onSuccess?: (response: RolePermissionListResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Update: \"Administration/RolePermission/Update\",\n        List: \"Administration/RolePermission/List\"\n    } as const;\n\n    [\n        'Update', \n        'List'\n    ].forEach(x => {\n        (<any>RolePermissionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { StringEditor, EmailAddressEditor, LookupEditor, ImageUploadEditor, PasswordEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface UserForm {\n    Username: StringEditor;\n    DisplayName: StringEditor;\n    Email: EmailAddressEditor;\n    Roles: LookupEditor;\n    UserImage: ImageUploadEditor;\n    Password: PasswordEditor;\n    PasswordConfirm: PasswordEditor;\n    Source: StringEditor;\n}\n\nexport class UserForm extends PrefixedContext {\n    static formKey = 'Administration.User';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!UserForm.init)  {\n            UserForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = EmailAddressEditor;\n            var w2 = LookupEditor;\n            var w3 = ImageUploadEditor;\n            var w4 = PasswordEditor;\n\n            initFormType(UserForm, [\n                'Username', w0,\n                'DisplayName', w0,\n                'Email', w1,\n                'Roles', w2,\n                'UserImage', w3,\n                'Password', w4,\n                'PasswordConfirm', w4,\n                'Source', w0\n            ]);\n        }\n    }\n}\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface UserPermissionRow {\n    UserPermissionId?: number;\n    UserId?: number;\n    PermissionKey?: string;\n    Granted?: boolean;\n    Username?: string;\n    User?: string;\n}\n\nexport abstract class UserPermissionRow {\n    static readonly idProperty = 'UserPermissionId';\n    static readonly nameProperty = 'PermissionKey';\n    static readonly localTextPrefix = 'Administration.UserPermission';\n    static readonly deletePermission = 'Administration:Security';\n    static readonly insertPermission = 'Administration:Security';\n    static readonly readPermission = 'Administration:Security';\n    static readonly updatePermission = 'Administration:Security';\n\n    static readonly Fields = fieldsProxy<UserPermissionRow>();\n}\n", "\uFEFFimport { UserPermissionUpdateRequest } from \"./UserPermissionUpdateRequest\";\nimport { SaveResponse, ListResponse } from \"@serenity-is/corelib\";\nimport { ServiceOptions, ServiceRequest, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { UserPermissionListRequest } from \"./UserPermissionListRequest\";\nimport { UserPermissionRow } from \"./UserPermissionRow\";\n\nexport namespace UserPermissionService {\n    export const baseUrl = 'Administration/UserPermission';\n\n    export declare function Update(request: UserPermissionUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: UserPermissionListRequest, onSuccess?: (response: ListResponse<UserPermissionRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function ListRolePermissions(request: UserPermissionListRequest, onSuccess?: (response: ListResponse<string>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function ListPermissionKeys(request: ServiceRequest, onSuccess?: (response: ListResponse<string>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Update: \"Administration/UserPermission/Update\",\n        List: \"Administration/UserPermission/List\",\n        ListRolePermissions: \"Administration/UserPermission/ListRolePermissions\",\n        ListPermissionKeys: \"Administration/UserPermission/ListPermissionKeys\"\n    } as const;\n\n    [\n        'Update', \n        'List', \n        'ListRolePermissions', \n        'ListPermissionKeys'\n    ].forEach(x => {\n        (<any>UserPermissionService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface UserRoleRow {\n    UserRoleId?: number;\n    UserId?: number;\n    RoleId?: number;\n    Username?: string;\n    User?: string;\n}\n\nexport abstract class UserRoleRow {\n    static readonly idProperty = 'UserRoleId';\n    static readonly localTextPrefix = 'Administration.UserRole';\n    static readonly deletePermission = 'Administration:Security';\n    static readonly insertPermission = 'Administration:Security';\n    static readonly readPermission = 'Administration:Security';\n    static readonly updatePermission = 'Administration:Security';\n\n    static readonly Fields = fieldsProxy<UserRoleRow>();\n}\n", "\uFEFFimport { UserRoleUpdateRequest } from \"./UserRoleUpdateRequest\";\nimport { SaveResponse } from \"@serenity-is/corelib\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { UserRoleListRequest } from \"./UserRoleListRequest\";\nimport { UserRoleListResponse } from \"./UserRoleListResponse\";\n\nexport namespace UserRoleService {\n    export const baseUrl = 'Administration/UserRole';\n\n    export declare function Update(request: UserRoleUpdateRequest, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: UserRoleListRequest, onSuccess?: (response: UserRoleListResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Update: \"Administration/UserRole/Update\",\n        List: \"Administration/UserRole/List\"\n    } as const;\n\n    [\n        'Update', \n        'List'\n    ].forEach(x => {\n        (<any>UserRoleService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n"],
  "mappings": "2EACA,IAAAA,EAA4B,SAerB,IAAeC,EAAf,KAA2B,CAUlC,EAVsBC,EAAAD,EAAA,eAAAA,EACF,WAAa,KADXA,EAEF,aAAe,kBAFbA,EAGF,gBAAkB,gBAHhBA,EAIF,iBAAmB,0BAJjBA,EAKF,iBAAmB,0BALjBA,EAMF,eAAiB,0BANfA,EAOF,iBAAmB,0BAPjBA,EASF,UAAS,eAAyB,ECvBtD,IAAAE,EAA+C,SAE9BC,OACAA,EAAA,QAAU,gBAQVA,EAAA,QAAU,CACnB,OAAQ,uBACR,OAAQ,uBACR,OAAQ,uBACR,SAAU,yBACV,KAAM,oBACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAiBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC3C,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCJT,IAAMK,EAAN,KAAsB,CAE9B,EAFcC,EAAAD,EAAA,mBAAAA,EACH,WAAa,0BCDvB,IAAAE,EAAuD,SAQjD,IAAeC,EAAf,KAA2B,CAO9B,OAAO,WAAY,CAAE,SAAO,aAAuB,yBAAyB,CAAE,CAC9E,OAAa,gBAAiB,QAAAC,EAAA,sBAAE,SAAO,kBAA4B,yBAAyB,CAAE,GAQlG,EAhBsBC,EAAAF,EAAA,eAAAA,EACF,WAAa,KADXA,EAEF,aAAe,eAFbA,EAGF,gBAAkB,0BAHhBA,EAIF,UAAY,0BAJVA,EAUF,iBAAmB,6BAVjBA,EAWF,iBAAmB,6BAXjBA,EAYF,eAAiB,6BAZfA,EAaF,iBAAmB,6BAbjBA,EAeF,UAAS,eAAyB,ECrBtD,IAAAG,EAA+C,SAE9BC,OACAA,EAAA,QAAU,0BAQVA,EAAA,QAAU,CACnB,OAAQ,iCACR,OAAQ,iCACR,OAAQ,iCACR,SAAU,mCACV,KAAM,8BACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAiBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC3C,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCJT,IAAMK,EAAN,KAAkB,CAE1B,EAFcC,EAAAD,EAAA,eAAAA,EACH,WAAa,sBCDvB,IAAAE,EAAuD,SAOjD,IAAeC,EAAf,KAAuB,CAO1B,OAAO,WAAY,CAAE,SAAO,aAAmB,qBAAqB,CAAE,CACtE,OAAa,gBAAiB,QAAAC,EAAA,sBAAE,SAAO,kBAAwB,qBAAqB,CAAE,GAQ1F,EAhBsBC,EAAAF,EAAA,WAAAA,EACF,WAAa,SADXA,EAEF,aAAe,WAFbA,EAGF,gBAAkB,sBAHhBA,EAIF,UAAY,sBAJVA,EAUF,iBAAmB,0BAVjBA,EAWF,iBAAmB,0BAXjBA,EAYF,eAAiB,0BAZfA,EAaF,iBAAmB,0BAbjBA,EAeF,UAAS,eAAqB,ECpBlD,IAAAG,EAA+C,SAE9BC,OACAA,EAAA,QAAU,sBAQVA,EAAA,QAAU,CACnB,OAAQ,6BACR,OAAQ,6BACR,OAAQ,6BACR,SAAU,+BACV,KAAM,0BACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAaC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACvC,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,MAAA,KCDjB,IAAAK,GAA+C,SAG9BC,OACAA,EAAA,QAAU,6BAKVA,EAAA,QAAU,CACnB,KAAM,kCACN,OAAQ,mCACZ,EAEA,CACI,OACA,QACJ,EAAE,QAAQC,GAAK,CACLD,EAAoBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC9C,SAAO,mBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IAlBYJ,MAAA,KCNT,IAAMK,EAAN,KAAkB,CAE1B,EAFcC,EAAAD,EAAA,eAAAA,EACH,WAAa,sBCDvB,IAAAE,EAAuD,SAsBjD,IAAeC,EAAf,KAAuB,CAQ1B,OAAO,WAAY,CAAE,SAAO,aAAmB,qBAAqB,CAAE,CACtE,OAAa,gBAAiB,QAAAC,EAAA,sBAAE,SAAO,kBAAwB,qBAAqB,CAAE,GAQ1F,EAjBsBC,EAAAF,EAAA,WAAAA,EACF,WAAa,SADXA,EAEF,iBAAmB,WAFjBA,EAGF,aAAe,WAHbA,EAIF,gBAAkB,sBAJhBA,EAKF,UAAY,sBALVA,EAWF,iBAAmB,0BAXjBA,EAYF,iBAAmB,0BAZjBA,EAaF,eAAiB,0BAbfA,EAcF,iBAAmB,0BAdjBA,EAgBF,UAAS,eAAqB,ECpClD,IAAAG,GAA+C,SAG9BC,QACAA,EAAA,QAAU,sBAQVA,EAAA,QAAU,CACnB,OAAQ,6BACR,OAAQ,6BACR,OAAQ,6BACR,SAAU,+BACV,KAAM,0BACV,EAEA,CACI,SACA,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAaC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACvC,SAAO,mBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IA3BYJ,QAAA,KCLhB,IAAAK,GAA2B,SAEhBC,OACRA,IAAA,OAAS,GAAT,SACAA,IAAA,OAAS,GAAT,SACAA,IAAA,OAAS,GAAT,SAHQA,OAAA,IAKZ,cAAW,iBAAiBA,EAAiB,uBAAwB,4BAA4B,ECPjG,IAAAC,EAA0B,SAMnB,IAAMC,EAAN,KAAgE,CACnE,OAAO,OAAOC,EAA6B,CACvC,IAAIC,EAAOD,EAAI,KAEXE,EAAQ,GACZ,OAAID,EAAK,YAAc,EACnBC,EAAQ,UACDD,EAAK,YAAc,EAC1BC,EAAQ,SAERA,EAAQ,UAGL,4BAA4BA,MAAUC,EAAgBF,EAAK,UAAU,UAChF,CAEA,OAAOD,EAA6B,CAChC,OAAOD,EAA4B,OAAOC,CAAG,CACjD,CACJ,EAnBaI,EAAAL,EAAA,+BAAAA,EAANM,EAAA,CADG,aAAW,kBAAkB,mCAAoC,CAAU,iBAAe,CAAC,GACxFN,GCHN,IAAMO,EAAN,KAAsB,CAE7B,EAFaC,EAAAD,EAAA,mBAAAA,EACF,WAAa,gBCJvB,IAAAE,EAAuG,SCAxG,IAAAC,EAA0B,SAC1BC,EAAmB,SAIZ,IAAMC,EAAN,cAAuC,QACR,CAIlC,YAAYC,EAAmBC,EAAiC,CAC5D,MAAMD,EAAWC,CAAO,EAGpB,KAAK,QAAQ,WACb,KAAK,QAAQ,QAAQ,QAAQ,EAAE,KAAK,UAAU,EAAE,KAAK,EAGzD,KAAK,QAAQ,QAAQ,QAAQ,EAAE,KAAK,KAAK,EAAE,KAAK,EAEhD,KAAK,qBAAqB,CAC9B,CAEQ,sBAAuB,CAC3B,IAAIC,EAAS,WAAS,KAAK,QAAQ,KAAM,KAAK,MAAM,EAEhD,KAAK,QAAQ,SACbA,EAAS,aAAWA,CAAI,GAExB,KAAK,QAAQ,aACbA,EAAS,aAAWA,EAAQ,UAAQ,cAAc,GAGlD,KAAK,QAAQ,cACbA,EAAS,OAAKA,CAAI,GAGlB,KAAK,QAAQ,OACb,KAAK,QAAQ,KAAKA,CAAI,EAEtB,KAAK,QAAQ,KAAKA,CAAI,CAC9B,CAMO,aAAaC,EAAaC,EAAiC,CAC1D,KAAK,QAAQ,MAAQ,OACrB,KAAK,OAAW,WAAS,KAAK,QAAQ,KAAMD,EAAOC,EAAS,IAAI,CAAC,EACjE,KAAK,qBAAqB,EAElC,CAEA,IAAW,OAAQ,CACf,OAAO,KAAK,MAChB,CAEA,IAAW,MAAMC,EAAO,CACpB,KAAK,OAASA,EACd,KAAK,qBAAqB,CAC9B,CAEJ,EA1DaC,EAAAP,EAAA,mBAAAA,EAANQ,EAAA,CAFG,aAAW,eAAe,uBAAwB,CAAU,eAAa,CAAC,EAC1E,aAAW,QAAQ,QAAQ,GACxBR,GDFb,IAAAS,GAA6B,SActB,IAAMC,EAAN,cAA2B,iBAAgB,CAI9C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAa,KAAO,CACrBA,EAAa,KAAO,GAEpB,IAAIE,EAAK,eACLC,EAAK,aACLC,EAAK,iBACLC,EAAK,gBACLC,EAAKC,EACLC,GAAK,kBAET,iBAAaR,EAAc,CACvB,kBAAmBE,EACnB,aAAcC,EACd,aAAcC,EACd,WAAYC,EACZ,UAAWC,EACX,SAAUE,GACV,YAAaN,EACb,YAAaA,EACb,eAAgBA,CACpB,CAAC,CACL,CACJ,CACJ,EA9BaO,EAANT,EAAMU,EAAAD,EAAA,gBAAAA,EACF,QAAU,gBEhBrB,IAAAE,GAA+C,SAE9BC,QACAA,EAAA,QAAU,iBAIVA,EAAA,QAAU,CACnB,KAAM,qBACV,EAEA,CACI,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAuBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACjD,SAAO,mBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IAfYJ,QAAA,KCJhB,IAAAK,GAA2B,SAEhBC,QACRA,IAAA,QAAU,GAAV,UACAA,IAAA,SAAW,GAAX,WACAA,IAAA,MAAQ,GAAR,QACAA,IAAA,MAAQ,GAAR,QACAA,IAAA,IAAM,GAAN,MACAA,IAAA,KAAO,GAAP,OACAA,IAAA,KAAO,GAAP,OACAA,IAAA,OAAS,GAAT,SACAA,IAAA,UAAY,GAAZ,YACAA,IAAA,QAAU,GAAV,UACAA,IAAA,SAAW,IAAX,WACAA,IAAA,SAAW,IAAX,WAZQA,QAAA,IAcZ,cAAW,iBAAiBA,GAAQ,cAAe,QAAQ,EChB1D,IAAAC,GAA2B,SAEhBC,QACRA,IAAA,KAAO,GAAP,OACAA,IAAA,IAAM,GAAN,MACAA,IAAA,KAAO,GAAP,OACAA,IAAA,MAAQ,GAAR,QACAA,IAAA,cAAgB,GAAhB,gBACAA,IAAA,KAAO,GAAP,OANQA,QAAA,IAQZ,cAAW,iBAAiBA,GAAS,eAAgB,SAAS,ECV7D,IAAAC,EAA8C,SAC/CC,GAA6B,SAOtB,IAAMC,EAAN,cAA2B,iBAAgB,CAI9C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAa,KAAO,CACrBA,EAAa,KAAO,GAEpB,IAAIE,EAAK,kBAET,iBAAaF,EAAc,CACvB,aAAcE,EACd,eAAgBA,CACpB,CAAC,CACL,CACJ,CACJ,EAlBaC,EAANH,EAAMI,EAAAD,EAAA,gBAAAA,EACF,QAAU,0BCTb,IAAUE,QACDA,EAAA,SAAW,0BACXA,EAAA,YAAc,+BAFbA,QAAA,KCAjB,IAAAC,EAA8C,SAC/CC,GAA6B,SAMtB,IAAMC,EAAN,cAAuB,iBAAgB,CAI1C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAS,KAAO,CACjBA,EAAS,KAAO,GAEhB,IAAIE,EAAK,kBAET,iBAAaF,EAAU,CACnB,WAAYE,CAChB,CAAC,CACL,CACJ,CACJ,EAjBaC,EAANH,EAAMI,EAAAD,EAAA,YAAAA,EACF,QAAU,sBCRpB,IAAAE,GAA4B,SAStB,IAAeC,EAAf,KAAiC,CAUxC,EAVsBC,EAAAD,EAAA,qBAAAA,EACF,WAAa,mBADXA,EAEF,aAAe,gBAFbA,EAGF,gBAAkB,gCAHhBA,EAIF,iBAAmB,0BAJjBA,EAKF,iBAAmB,0BALjBA,EAMF,eAAiB,0BANfA,EAOF,iBAAmB,0BAPjBA,EASF,UAAS,gBAA+B,EChB5D,IAAAE,GAA+C,SAI9BC,QACAA,EAAA,QAAU,gCAKVA,EAAA,QAAU,CACnB,OAAQ,uCACR,KAAM,oCACV,EAEA,CACI,SACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAuBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACjD,SAAO,mBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IAlBYJ,QAAA,KCNhB,IAAAK,EAAmH,SACpHC,GAA6B,SAatB,IAAMC,EAAN,cAAuB,iBAAgB,CAI1C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAS,KAAO,CACjBA,EAAS,KAAO,GAEhB,IAAIE,EAAK,eACLC,EAAK,qBACLC,EAAK,eACLC,EAAK,oBACLC,EAAK,oBAET,iBAAaN,EAAU,CACnB,WAAYE,EACZ,cAAeA,EACf,QAASC,EACT,QAASC,EACT,YAAaC,EACb,WAAYC,EACZ,kBAAmBA,EACnB,SAAUJ,CACd,CAAC,CACL,CACJ,CACJ,EA5BaK,EAANP,EAAMQ,EAAAD,EAAA,YAAAA,EACF,QAAU,sBCfpB,IAAAE,GAA4B,SAWtB,IAAeC,EAAf,KAAiC,CAUxC,EAVsBC,EAAAD,EAAA,qBAAAA,EACF,WAAa,mBADXA,EAEF,aAAe,gBAFbA,EAGF,gBAAkB,gCAHhBA,EAIF,iBAAmB,0BAJjBA,EAKF,iBAAmB,0BALjBA,EAMF,eAAiB,0BANfA,EAOF,iBAAmB,0BAPjBA,EASF,UAAS,gBAA+B,EClB5D,IAAAE,GAA+D,SAI9CC,QACAA,EAAA,QAAU,gCAOVA,EAAA,QAAU,CACnB,OAAQ,uCACR,KAAM,qCACN,oBAAqB,oDACrB,mBAAoB,kDACxB,EAEA,CACI,SACA,OACA,sBACA,oBACJ,EAAE,QAAQC,GAAK,CACLD,EAAuBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CACjD,SAAO,mBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IAxBYJ,QAAA,KCNhB,IAAAK,GAA4B,SAUtB,IAAeC,EAAf,KAA2B,CASlC,EATsBC,EAAAD,EAAA,eAAAA,EACF,WAAa,aADXA,EAEF,gBAAkB,0BAFhBA,EAGF,iBAAmB,0BAHjBA,EAIF,iBAAmB,0BAJjBA,EAKF,eAAiB,0BALfA,EAMF,iBAAmB,0BANjBA,EAQF,UAAS,gBAAyB,EChBtD,IAAAE,GAA+C,SAI9BC,QACAA,EAAA,QAAU,0BAKVA,EAAA,QAAU,CACnB,OAAQ,iCACR,KAAM,8BACV,EAEA,CACI,SACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAiBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC3C,SAAO,mBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IAlBYJ,QAAA",
  "names": ["import_q", "AuditLogRow", "__name", "import_q", "AuditLogService", "x", "r", "s", "o", "LanguageColumns", "__name", "import_q", "LanguageRow", "__async", "__name", "import_q", "LanguageService", "x", "r", "s", "o", "RoleColumns", "__name", "import_q", "RoleRow", "__async", "__name", "import_q", "RoleService", "x", "r", "s", "o", "import_q", "TranslationService", "x", "r", "s", "o", "UserColumns", "__name", "import_q", "UserRow", "__async", "__name", "import_q", "UserService", "x", "r", "s", "o", "import_corelib", "AuditActionType", "Serenity", "AuditLogActionTypeFormatter", "ctx", "item", "klass", "AuditActionType", "__name", "__decorateClass", "AuditLogColumns", "__name", "import_corelib", "Serenity", "Q", "StaticTextBlock", "container", "options", "text", "source", "property", "value", "__name", "__decorateClass", "import_q", "_AuditLogForm", "prefix", "w0", "w1", "w2", "w3", "w4", "StaticTextBlock", "w5", "AuditLogForm", "__name", "import_q", "AuditLogViewerService", "x", "r", "s", "o", "import_corelib", "Months", "import_corelib", "TimeUoM", "import_corelib", "import_q", "_LanguageForm", "prefix", "w0", "LanguageForm", "__name", "PermissionKeys", "import_corelib", "import_q", "_RoleForm", "prefix", "w0", "RoleForm", "__name", "import_q", "RolePermissionRow", "__name", "import_q", "RolePermissionService", "x", "r", "s", "o", "import_corelib", "import_q", "_UserForm", "prefix", "w0", "w1", "w2", "w3", "w4", "UserForm", "__name", "import_q", "UserPermissionRow", "__name", "import_q", "UserPermissionService", "x", "r", "s", "o", "import_q", "UserRoleRow", "__name", "import_q", "UserRoleService", "x", "r", "s", "o"]
}
